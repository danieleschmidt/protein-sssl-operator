# Comprehensive CI/CD Pipeline for protein-sssl-operator
# Terragon Labs - Autonomous SDLC Execution

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PROJECT_NAME: protein-sssl-operator
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-checks:
    name: Security & Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        pip install -e .[dev]

    - name: Run Bandit security analysis
      run: |
        bandit -r protein_sssl/ -f json -o bandit-report.json
        bandit -r protein_sssl/ -f txt

    - name: Run Safety vulnerability check
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto protein_sssl/ --json --output=semgrep-report.json
        semgrep --config=auto protein_sssl/

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # Code Quality and Linting
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -e .[dev]

    - name: Check code formatting with Black
      run: black --check protein_sssl/ tests/

    - name: Check import sorting with isort
      run: isort --check-only protein_sssl/ tests/

    - name: Run flake8 linting
      run: flake8 protein_sssl/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run comprehensive linting
      run: flake8 protein_sssl/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run type checking with mypy
      run: mypy protein_sssl/ --ignore-missing-imports

  # Unit and Integration Tests
  test-suite:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-timeout
        pip install -e .[dev]

    - name: Run unit tests
      run: |
        pytest tests/test_models.py tests/test_data.py tests/test_config.py tests/test_cli.py \
          --verbose --tb=short --junit-xml=unit-tests.xml \
          --cov=protein_sssl --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py \
          --verbose --tb=long --junit-xml=integration-tests.xml \
          --timeout=300

    - name: Run security tests
      run: |
        pytest tests/test_security.py \
          --verbose --tb=short --junit-xml=security-tests.xml \
          --timeout=180

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          *-tests.xml
          coverage.xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Performance and Load Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-timeout memory-profiler psutil
        pip install -e .[dev]

    - name: Run performance tests
      run: |
        pytest tests/test_performance.py tests/test_monitoring.py \
          --verbose --tb=short --junit-xml=performance-tests.xml \
          --timeout=600 -m "not slow"

    - name: Run memory profiling
      run: |
        python -m memory_profiler scripts/profile_memory.py || true

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          performance-tests.xml
          memory-profile.log

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [security-checks, code-quality, test-suite]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build CPU Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build GPU Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.gpu
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}-gpu
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Kubernetes Deployment Validation
  k8s-validation:
    name: Kubernetes Validation
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Validate Kubernetes manifests
      run: |
        kubectl apply --dry-run=client -f kubernetes/
        kubectl apply --dry-run=server -f kubernetes/ || true

    - name: Lint Helm charts
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        helm lint helm/protein-sssl/
        helm template protein-sssl helm/protein-sssl/ --validate

    - name: Run Kubernetes security scan
      run: |
        # Install kubesec
        wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
        tar -xzf kubesec_linux_amd64.tar.gz
        ./kubesec scan kubernetes/*.yaml

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [performance-tests, docker-build, k8s-validation]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.protein-sssl.terragonlabs.ai
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > ~/.kube/config

    - name: Deploy to staging
      run: |
        export ENVIRONMENT=staging
        export VERSION=${{ github.sha }}
        export NAMESPACE=protein-sssl-staging
        ./deployment/production-deploy.sh --no-rollback

    - name: Run staging tests
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available deployment/protein-sssl -n protein-sssl-staging --timeout=600s
        
        # Run health checks
        kubectl run staging-healthcheck --rm -i --restart=Never \
          --image=curlimages/curl \
          -- curl -f http://protein-sssl.protein-sssl-staging.svc.cluster.local/health

    - name: Performance benchmarks
      run: |
        kubectl run staging-benchmark --rm -i --restart=Never \
          --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -- python -m protein_sssl.cli.main predict MKFLKFSLLTAV --model /app/models/test_model.pt

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://protein-sssl.terragonlabs.ai
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > ~/.kube/config

    - name: Deploy to production
      run: |
        export ENVIRONMENT=production
        export VERSION=${{ github.event.release.tag_name }}
        export NAMESPACE=protein-sssl-prod
        ./deployment/production-deploy.sh

    - name: Verify production deployment
      run: |
        # Wait for deployment
        kubectl wait --for=condition=available deployment/protein-sssl -n protein-sssl-prod --timeout=900s
        
        # Health check
        kubectl run production-healthcheck --rm -i --restart=Never \
          --image=curlimages/curl \
          -- curl -f http://protein-sssl.protein-sssl-prod.svc.cluster.local/health
        
        # Load test
        kubectl run production-loadtest --rm -i --restart=Never \
          --image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }} \
          -- python scripts/load_test.py --duration=60 --concurrent=5

  # Notification and Reporting
  notify:
    name: Notification & Reporting
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate deployment report
      run: |
        echo "# Deployment Report" > deployment-report.md
        echo "**Workflow**: ${{ github.workflow }}" >> deployment-report.md
        echo "**Run ID**: ${{ github.run_id }}" >> deployment-report.md
        echo "**Commit**: ${{ github.sha }}" >> deployment-report.md
        echo "**Status**: ${{ job.status }}" >> deployment-report.md
        echo "**Deployed Version**: ${{ github.event.release.tag_name || github.sha }}" >> deployment-report.md

    - name: Slack Notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🚀 Deployment completed for protein-sssl-operator
          Status: ${{ job.status }}
          Version: ${{ github.event.release.tag_name || github.sha }}
          Environment: Production
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create GitHub Issue on Failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `CI/CD Pipeline Failed - ${context.sha}`,
            body: `
            The CI/CD pipeline failed for commit ${context.sha}.
            
            **Workflow**: ${context.workflow}
            **Run ID**: ${context.runId}
            **Actor**: ${context.actor}
            
            Please investigate the failure and fix any issues.
            
            [View Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `,
            labels: ['bug', 'ci/cd', 'urgent']
          })

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
    - name: Clean up old Docker images
      run: |
        # This would typically connect to your registry and clean up old images
        echo "Cleaning up old Docker images..."
        
    - name: Archive artifacts
      if: always()
      run: |
        echo "Archiving test reports and artifacts..."